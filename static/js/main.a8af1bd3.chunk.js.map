{"version":3,"sources":["components/GlobalStyles/index.js","api/getActors.js","components/ActorCard/style.js","components/ActorCard/index.js","containers/Home/style.js","components/StackOfActorCards/style.js","components/StackOfActorCards/index.js","containers/Home/index.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","getActors","fetch","then","r","ok","Error","statusText","json","Card","styled","div","Avatar","Name","ContentRegion","Bio","AgeLabel","ActorCard","actor","props","first_name","last_name","avatar","age","elevation","style","backgroundImage","Skeleton","animation","width","React","memo","Container","MaterialContainer","Spacer","left","ActiveCardIn","keyframes","ActiveCard","ActiveCardRegion","StackOfActorCardsRegion","Item","Empty","StackOfActorCards","actors","length","map","i","CalculateItemStyle","id","index","display","scalingFactor","top","zIndex","transform","Home","useQuery","data","isLoading","useState","likedActors","setLikedActors","dislikedActors","setDislikedActors","useMemo","filteredActors","filter","slice","activeActor","remainingActors","handleDislike","useCallback","handleLike","handleChangeIndex","newIndex","setTimeout","maxWidth","LinearProgress","resistance","onChangeIndex","enableMouseEvents","overflow","onClick","right","client","QueryClient","App","QueryClientProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8af1bd3.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: #f4f4f4;\n  }\n`;\n","/* This function uses fetch to load the actors from a static json file\n * in public/actors.json. This is obviously just mock data, but it simulates\n * a real HTTP request with loading states. If we were to connect this to a real api,\n * we would obviously replace the URL to point to the API.\n * */\nexport function getActors() {\n  return fetch(\"/actors.json\").then((r) => {\n    if (!r.ok) throw new Error(r.statusText);\n    return r.json();\n  });\n}\n","import styled from \"styled-components\";\n\nexport const Card = styled.div`\n  box-shadow: 0 -10px 5px -10px rgba(0, 0, 0, 0.2),\n    0 17px 15px -15px rgba(0, 0, 0, 0.3);\n  border-radius: 12px;\n  background: #fff;\n  overflow: hidden;\n`;\n\nexport const Avatar = styled.div`\n  padding-top: 120%;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center center;\n`;\n\nexport const Name = styled.div`\n  font-size: 20px;\n  font-weight: 600;\n  line-height: 2.5;\n`;\n\nexport const ContentRegion = styled.div`\n  padding: 8px 16px 16px 16px;\n`;\n\nexport const Bio = styled.div`\n  font-size: 10px;\n`;\n\nexport const AgeLabel = styled.div`\n  display: inline-block;\n  font-weight: normal;\n`;\n","import React from \"react\";\nimport { Avatar, Card, Name, ContentRegion, AgeLabel, Bio } from \"./style\";\nimport PropTypes from \"prop-types\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\n\n/* This component renders the actor card. Nothing special, just cosmetic. */\nfunction ActorCard({ actor, ...props }) {\n  const { first_name, last_name, avatar, age } = actor;\n  return (\n    <Card elevation={0} {...props}>\n      <Avatar style={{ backgroundImage: `url(${avatar})` }} />\n      <ContentRegion>\n        <Name>\n          {first_name} {last_name}\n          <AgeLabel>, {age}</AgeLabel>\n        </Name>\n        <Bio>\n          <Skeleton animation={false} />\n          <Skeleton animation={false} width=\"45%\" />\n        </Bio>\n      </ContentRegion>\n    </Card>\n  );\n}\n\nActorCard.propTypes = {\n  actor: PropTypes.any.isRequired,\n};\n\nexport default React.memo(ActorCard);\n","import styled, { keyframes } from \"styled-components\";\nimport MaterialContainer from \"@material-ui/core/Container\";\n\nexport const Container = styled(MaterialContainer)`\n  position: relative;\n  height: 100%;\n  padding: 16px;\n`;\n\nexport const Spacer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: ${({ left }) => (left ? \"flex-end\" : \"flex-start\")};\n  height: 100%;\n\n  .MuiSvgIcon-root {\n    font-size: 150px;\n    color: #fff;\n    filter: drop-shadow(0 0 5px rgba(0, 0, 0, 0.2));\n    cursor: pointer;\n    transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);\n\n    @media (hover: hover) {\n      &:hover {\n        transform: scale(1.1);\n      }\n    }\n  }\n`;\n\nconst ActiveCardIn = keyframes`\n  from {\n    transform: scale(0.95);\n  }\n  to {\n    transform: scale(1);\n  }\n`;\n\nexport const ActiveCard = styled.div`\n  padding: 16px 16px 24px 16px;\n\n  animation: ${ActiveCardIn} 0.5s cubic-bezier(0.16, 1, 0.3, 1) forwards;\n`;\n\nexport const ActiveCardRegion = styled.div`\n  position: relative;\n  z-index: 1000;\n  margin: 45px -16px 0 -16px;\n`;\n\nexport const StackOfActorCardsRegion = styled.div`\n  position: absolute;\n  top: 16px;\n  left: 16px;\n  right: 16px;\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  position: relative;\n`;\n\nexport const Item = styled.div`\n  position: absolute;\n  transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);\n  width: 100%;\n`;\n\nexport const Empty = styled.div`\n  position: absolute;\n  margin-top: 150px;\n  display: flex;\n  text-align: center;\n  justify-content: center;\n  width: 100%;\n  font-size: 30px;\n  font-weight: 600;\n  color: #ddd;\n  text-shadow: 0 1px 1px rgba(255, 255, 255, 1);\n`;\n","import React from \"react\";\nimport { Container, Item, Empty } from \"./style\";\nimport ActorCard from \"../ActorCard\";\nimport * as PropTypes from \"prop-types\";\n\n/* This component renders a stack of ActorCards and\n * places them on top of each other. It uses the index\n * to calculate styles for each container, as to position\n * and scale it smaller as we progress to the rear of the array. */\nfunction StackOfActorCards({ actors }) {\n  return (\n    <Container>\n      {actors && actors.length > 0 ? (\n        actors.map((actor, i) => (\n          <Item key={actor.id} style={CalculateItemStyle(i)}>\n            <ActorCard actor={actor} />\n          </Item>\n        ))\n      ) : (\n        <Empty>No more actors!</Empty>\n      )}\n    </Container>\n  );\n}\n\n/* This function calculates some styles based on the index parameter */\nfunction CalculateItemStyle(index) {\n  /* Here we hide the cards after index 4 */\n  if (index > 5) return { display: \"none\" };\n\n  /* We calculate some scalingFactor using the index. This scalingFactor\n   * shrinks as index increases. */\n  const scalingFactor = ((1 / (index + 2)) * (1 / (index + 3))) / 0.3;\n  return {\n    top: `${100 * scalingFactor - 40}px`,\n\n    /* We invert the the zIndex as to put the first items in the array on top */\n    zIndex: 100 - index,\n\n    /* This shrinks the cards as the index increases */\n    transform: `scale(${0.8 + 0.2 * scalingFactor})`,\n  };\n}\n\nStackOfActorCards.propTypes = {\n  actors: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nexport default React.memo(StackOfActorCards);\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getActors } from \"../../api/getActors\";\nimport ActorCard from \"../../components/ActorCard\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport {\n  Spacer,\n  ActiveCard,\n  StackOfActorCardsRegion,\n  Container,\n  ActiveCardRegion,\n} from \"./style\";\nimport StackOfActorCards from \"../../components/StackOfActorCards\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\nimport SentimentDissatisfiedIcon from \"@material-ui/icons/SentimentDissatisfied\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nfunction Home() {\n  /* Load the actors from API and store in actors. Notice that we use\n   * react-query to keep track of the API states.\n   *\n   * https://react-query.tanstack.com/overview\n   *  */\n  const { data: actors, isLoading } = useQuery(\"actors\", getActors);\n\n  /* We keep track of the liked and disliked actors using 2 dictionaries in state. */\n  const [likedActors, setLikedActors] = useState({});\n  const [dislikedActors, setDislikedActors] = useState({});\n\n  /* This section filters the actors array (from the API) by first removing\n   * any actors that's already in the likedActors or dislikedActors dictionaries.\n   * We then split the array into 2 field, activeActor and remainingActors. */\n  const [activeActor, remainingActors] = useMemo(() => {\n    /* If the actors array is not defined yet, simple return nulls. */\n    if (!actors) return [null, null];\n    const filteredActors = actors.filter(({ id }) => {\n      return !(id in likedActors || id in dislikedActors);\n    });\n    return [filteredActors[0], filteredActors.slice(1)];\n  }, [actors, dislikedActors, likedActors]);\n\n  /* When disliking an actor, add them to the dislikedActors dictionary.\n   * Using a dictionary instead of an array for fast lookup. */\n  const handleDislike = useCallback(() => {\n    setDislikedActors({\n      ...dislikedActors,\n      [activeActor.id]: activeActor,\n    });\n  }, [setDislikedActors, dislikedActors, activeActor]);\n\n  /* When liking an actor, add them to the likedActors dictionary.\n   * Using a dictionary instead of an array for fast lookup. */\n  const handleLike = useCallback(() => {\n    setLikedActors({\n      ...likedActors,\n      [activeActor.id]: activeActor,\n    });\n  }, [likedActors, activeActor]);\n\n  /* The SwipeableViews component fires the onChangeIndex callback when a swipe occurs.\n   * Since we set the SwipeableViews component index to 1 explicitly, the onChangeIndex\n   * callback will only ever be called with a newIndex of 0 (swipe right) or 2 (swipe left).\n   * We then call the handleLike or handleDislike functions based on the nextIndex.\n   *\n   * Notice that this will set off a chain reaction of state updates that will result in the\n   * activeActor variable changing. We then force the SwipeableViews component to rerender\n   * by updating the key property to the next activeActor's id. This is to reset the currentIndex\n   * back to 1. This is a bit of a hack, but it's the only way to change the index programmatically.\n   *\n   * https://react-swipeable-views.com/getting-started/usage/\n   *  */\n  const handleChangeIndex = useCallback(\n    (newIndex) => {\n      setTimeout(() => {\n        if (newIndex === 0) {\n          handleDislike();\n        } else if (newIndex === 2) {\n          handleLike();\n        }\n      }, 150);\n    },\n    [handleDislike, handleLike]\n  );\n\n  /* We render 2 main sections: ActiveCardRegion and StackOfActorCardsRegion and then\n   * style them to stack, ActiveCardRegion being in front.\n   *\n   * The ActiveCardRegion region contains a SwipeableViews component with 3 slides as\n   * children. The first slide is the Spacer component with a Like icon. The second slide\n   * is the activeActor rendered into an ActorCard. The third slide is another Spacer\n   * but it contains the Dislike icon. Notice that the active/selected slide is set explicitly\n   * to be the middle slide, containing the ActorCard. The user can then slide left or right\n   * only once, as a way to set the active actor to liked/disliked.\n   *\n   * The StackOfActorCardsRegion region contains a stack of ActorCard rendered on top\n   * of each other, and styled to look like an actual stack of cards. This is just visual\n   * and appears behind the ActiveCardRegion from above.\n   *  */\n  return (\n    <Container maxWidth=\"xs\">\n      {isLoading ? (\n        <>\n          {/* Show a linear loading indicator when the API response is being loaded */}\n          <LinearProgress />\n        </>\n      ) : (\n        <>\n          {activeActor && (\n            <ActiveCardRegion>\n              <SwipeableViews\n                /* Setting the key to the ID of the activeActor forces the SwipeableViews\n                 * component to rerender and reset the index to 1 when the activeActor\n                 * changes. */\n                key={activeActor.id}\n                resistance\n                index={1}\n                onChangeIndex={handleChangeIndex}\n                enableMouseEvents\n                /* This enables us to see the slides that's NOT currently active (on the sides).\n                 * This improves the experience on desktop specifically. */\n                style={{ overflow: \"visible\" }}\n              >\n                <Spacer left>\n                  <FavoriteBorder\n                    /* Notice that the user can click the dislike button on desktop */\n                    onClick={handleDislike}\n                  />\n                </Spacer>\n                <ActiveCard>\n                  <ActorCard actor={activeActor} />\n                </ActiveCard>\n                <Spacer right>\n                  <SentimentDissatisfiedIcon\n                    /* Notice that the user can click the like button on desktop */\n                    onClick={handleLike}\n                  />\n                </Spacer>\n              </SwipeableViews>\n            </ActiveCardRegion>\n          )}\n          <StackOfActorCardsRegion>\n            <StackOfActorCards\n              /* We pass in the remaining actors as calculated earlier to be rendered into\n               * a stack of cards */\n              actors={remainingActors}\n            />\n          </StackOfActorCardsRegion>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default React.memo(Home);\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { GlobalStyles } from \"./components/GlobalStyles\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport Home from \"./containers/Home\";\n\nconst client = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={client}>\n      <CssBaseline />\n      <GlobalStyles />\n      <Home />\n    </QueryClientProvider>\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}